import streamlit as st  # –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from ui.core.base import BaseView  # –±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è
from typing import Any, Dict  # —Ç–∏–ø–∏–∑–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from ui.models.data_loader import DataLoader
from app.src.preprocessing import *  # –∏–º–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
from datetime import datetime

class HomeView(BaseView):
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        self.data: Dict[str, str] = {}

    def update(self, data: Dict[str, str]) -> None:
        """
        –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è.
        –û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏:
        - title: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        - description: –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        - instruction: –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.data = data

    def render(self) -> None:
        """
        –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
        –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫, –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.
        """
        if "lock_navigation" not in st.session_state:
            st.session_state.lock_navigation = False
        if "run_update" not in st.session_state:
            st.session_state.run_update = False

        if st.session_state.run_update:
            self._do_update()   # your data loading / validation logic
            # clear flags and force one more rerun so UI resets
            st.session_state.run_update = False
            st.session_state.lock_navigation = False
            st.rerun()

        # –í—ã–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –µ—Å–ª–∏ –æ–Ω –∑–∞–¥–∞–Ω
        st.title(self.data.get("title", ""))
        # –í—ã–≤–æ–¥–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        st.write(self.data.get("description", ""))
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        st.write(self.data.get("instruction", ""))

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        last_update_file = 'data/raw/game_history.csv'
        if os.path.exists(last_update_file):
            last_update_time = datetime.fromtimestamp(os.path.getmtime(last_update_file)).strftime("%d-%m-%Y %H:%M")
            st.caption(f"üïí –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {last_update_time}")

        def arm_update():
            st.session_state.lock_navigation = True
            st.session_state.run_update = True

        st.button(
            "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
            on_click=arm_update,
            disabled=st.session_state.lock_navigation
        )

    def _do_update(self):
        # –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤
        load_status = st.empty()
        validate_status = st.empty()
        progress_bar = st.progress(0)
        # ==== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ====
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
            total_steps = 7
            step = 1

            load_status.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —à–∞–≥ {step}/{total_steps} ‚Äî –∞–º–ø–ª—É–∞ –∏–≥—Ä–æ–∫–æ–≤")
            df_amplua = DataLoader.fetch_players()
            progress_bar.progress(step / total_steps)

            step += 1
            load_status.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —à–∞–≥ {step}/{total_steps} ‚Äî –≤–æ–∑—Ä–∞—Å—Ç –∏–≥—Ä–æ–∫–æ–≤")
            df_player_age = pd.read_csv("data/raw/players_age.csv")
            progress_bar.progress(step / total_steps)

            step += 1
            load_status.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —à–∞–≥ {step}/{total_steps} ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤")
            df_player_stats = DataLoader.fetch_player_stats()
            progress_bar.progress(step / total_steps)

            step += 1
            load_status.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —à–∞–≥ {step}/{total_steps} ‚Äî –∏—Å—Ç–æ—Ä–∏—è –∏–≥—Ä")
            df_games_history = DataLoader.fetch_games_history()
            progress_bar.progress(step / total_steps)

            step += 1
            load_status.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —à–∞–≥ {step}/{total_steps} ‚Äî –≥–æ–ª—ã –∏ –ø–µ—Ä–µ–¥–∞—á–∏")
            df_goals_passes = DataLoader.fetch_game_goals_and_passes()
            progress_bar.progress(step / total_steps)

            step += 1
            load_status.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —à–∞–≥ {step}/{total_steps} ‚Äî —Å–æ–±—ã—Ç–∏—è –≤—Ä–∞—Ç–∞—Ä–µ–π")
            df_keeper_events = DataLoader.fetch_keeper_events()
            progress_bar.progress(step / total_steps)

            step += 1
            load_status.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö: —à–∞–≥ {step}/{total_steps} ‚Äî –¥–∞–Ω–Ω—ã–µ +/-")
            df_plus_minus = DataLoader.fetch_game_plus_minus()
            progress_bar.progress(step / total_steps)

        load_status.success("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

        # ==== –í–ê–õ–ò–î–ê–¶–ò–Ø ====
        with st.spinner("–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
            validation_steps = 16
            step = 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî –ø–æ–¥–º–µ–Ω–∞ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            replace_data("data/raw")
            re_format_file("data/raw")
            replace_zero_with_nan("data/raw")
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–≥—Ä")
            df_player_game = remove_invalid_games(df_player_stats)
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä")
            df_player_game = process_game_data(df_player_game)
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä–æ–∫–æ–≤ –±–µ–∑ –∞–º–ø–ª—É–∞")
            df_player_game = process_player_amplua(df_amplua, df_player_game)
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∞–º–ø–ª—É–∞")
            compile_stats = check_and_modify_amplua(df_player_game)
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏–π –≤—Ä–∞—Ç–∞—Ä–µ–π")
            # goalk_data = remove_inconsistent_games(df_keeper_events)
            goalk_filt, compile_stats = filter_goalkeeper_event_by_compile_stats(df_keeper_events, compile_stats)
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–æ–±—ã—Ç–∏—è–º–∏ –≤—Ä–∞—Ç–∞—Ä–µ–π")
            compile_stats = merge_goalkeeper_events(compile_stats, goalk_filt)
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫")
            compile_stats = remove_empty_rows(compile_stats)
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî –≤–∞–ª–∏–¥–∞—Ü–∏—è +/-")
            pm_clean = validation_for_pm(df_plus_minus)
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏–≥—Ä –±–µ–∑ +/-")
            df_pm_filtered = remove_PL_game(compile_stats, pm_clean)
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî —Ä–∞—Å—á—ë—Ç —Å—É–º–º—ã +/-")
            pm_sums = calculate_plus_minus(pm_clean)
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ +/-")
            compile_stats = add_plus_minus(df_pm_filtered, pm_sums)
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏")
            compile_stats = remove_games_with_missing_time(compile_stats)
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ–≤ –∏ –ø–∞—Å–æ–≤")
            compile_stats = add_goals_and_assists(compile_stats, df_goals_passes)
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
            filter_goalkeeper_events(
                compile_stats,
                df_keeper_events,
                'data/interim/filtered_goalkeeper_event.csv',
                'data/interim/goalkeeper_replace.csv'
            )
            del_swap_goalk(
                'data/interim/filtered_goalkeeper_event.csv',
                'data/interim/goalkeeper_replace.csv',
                compile_stats,
                'data/interim/filtered_goalkeeper_event_filtered.csv',
                'data/targeted/compile_stats.csv'
            )
            progress_bar.progress(step / validation_steps)

            step += 1
            validate_status.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è: —à–∞–≥ {step}/{validation_steps} ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞")
            clean_compile_stats('data/targeted/compile_stats.csv')
            create_goalkeepers_table(
                'data/targeted/compile_stats.csv',
                df_goals_passes,
                'data/targeted/goalkeepers_data.csv'
            )
            progress_bar.progress(step / validation_steps)

        validate_status.success("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã.")